from snakemake.utils import Paramspace
import subprocess
import uuid
import pandas as pd

configfile: "config/config.yml"

params_csv = config['paramspace']
paramspace = Paramspace(pd.read_csv(params_csv), param_sep="-")
print(*[p for p in paramspace.instance_patterns], sep = '\n')

wildcards = glob_wildcards("data/raw_fastqs/{sample}.R{read}.fastq.gz")

rule all:
    input:
        expand("log/{params}/submitted.txt", params=paramspace.instance_patterns)

rule select_region:
    input:
        bam="data/bams/{sample}.chr22.split.bam",
    output:
        txt=temp("data/subset_fastqs/{sample}.chr22.split.subset.txt"),
    params:
        chrom=22,
        start=40797000,
        end=41000000,
    conda: "envs/samtools.yml"
    shell:
        """
        samtools view -b -h {input.bam} "chr{params.chrom}:{params.start}-{params.end}" | \
            samtools bam2fq -n - | \
            grep "^@" | \
            sed "s/^@//" | \
            sort | \
            uniq > {output.txt}
        """

rule subset_fastq:
    input:
        names=rules.select_region.output.txt,
        fastq="data/raw_fastqs/{sample}.R{read}.fastq.gz",
    output:
        fastq="data/subset_fastqs/{sample}.chr22.split.R{read}.fastq.gz",
    conda: "envs/seqtk.yml"
    shell:
        """
        seqtk subseq {input.fastq} {input.names} | gzip > {output.fastq}
        """

rule construct_xavier:
    input:
        fastq=expand('data/subset_fastqs/{sample}.chr22.split.R{read}.fastq.gz', 
                sample=wildcards.sample, read=(1,2))
    output:
        sh=f"results/{paramspace.wildcard_pattern}/command.sh"
    params:
        p=paramspace.instance,
        inputdir = 'data/subset_fastqs/*.fastq.gz',
        outdir=f'results/{paramspace.wildcard_pattern}',
        xavier = config['xavier_bin'],
        targets = config['targets'],
        pairs = config['pairs'],
        genome = config['genome'],
        mode = config['mode'],
        run = ("init", "dryrun", "run"),
    run:
        # required arguments
        options = ['--input', params.inputdir, '--output', params.outdir, '--targets', params.targets, '--genome', params.genome]
        # flags
        for flag in ('cnv', 'ffpe'):
            if params.p[flag] == 'y':
                options.append(f"--{flag}")
        # named arguments
        if params.p['pair'] == 'y':
            options += ['--pairs', params.pairs]
        
        with open(output.sh, 'w') as outfile:
            for run in params.run:
                cmd=' '.join([params.xavier, "run", "--runmode", run, '--mode', params.mode] + options)
                print('COMMAND\n-------\n', cmd, '\n=======')
                
                if run == 'run':
                    outfile.write(cmd)
                elif run == 'init':
                    # TODO: subprocess fails on 'run' mode, maybe b/c XAVIER itself uses subprocess?
                    subprocess.call(cmd, shell=True) 

rule submit_xavier:
    input:
        sh=rules.construct_xavier.output.sh
    log:
        txt=f"log/{paramspace.wildcard_pattern}/submitted.txt"
    shell:
        """
        bash {input.sh} > {log.txt}
        """


# handle different temp dir locations depending on platform
user_tmpdisk = config['input_params']['tmpdisk']
def set_tmp():
    shell = r"""
        if [ -d {user_tmpdisk} ]; then
            echo "Using user-provided tmpdisk"
            tmpdisk={user_tmpdisk}
        elif [ -n $SLURM_JOBID ] && [ -d /lscratch/$SLURM_JOBID ]; then
            tmpdisk=/lscratch/$SLURM_JOBID
        else
            tmpdisk=/dev/shm/
        fi

        tmp=$tmpdisk/{random_str}
        mkdir -p $tmp
        trap 'rm -rf "$tmp"' EXIT
        """
    print(shell)
    return shell.format(user_tmpdisk=user_tmpdisk, random_str = str(uuid.uuid4())        )

rule test_tmp_disk1:
    params:
        set_tmp=set_tmp()
    shell:
        """
        echo "1"
        {params.set_tmp}
        echo "tmp: $tmp"
        echo "hello world" > $tmp/file.txt
        cat $tmp/file.txt
        ls $tmp
        """


rule test_tmp_disk2:
    params:
        set_tmp=set_tmp()
    shell:
        """
        echo "2"
        {params.set_tmp}
        echo "tmp: $tmp"
        """
